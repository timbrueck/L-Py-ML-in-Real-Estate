---
title: Quarto Computations
format: 
    html:
        code-fold: true
execute:
    echo: false
jupyter: python3
---

This document is for learning purposes 


## Rent scenarios

```{python}
# | label: code-cell-1
# | fig-cap: "annual rent per year - different vacancy scenarios"

import matplotlib.pyplot as plt
from datetime import datetime
import numpy as np

# Data

annual_net_rent = 5000000
rent_adjustment = 0.02

units = 5000
vacancy_chances = [0.0, 0.05, 0.1, 0.2]


# Generate years from current year to +10 years
current_year = datetime.now().year
years = list(range(current_year, current_year + 11))  # +11 because range is exclusive at the end

def rent_scenarios(vacancy_chance):
    rents = []
    for i in range(len(years)):
        if i == 0:
            # First year: full rent, no vacancy applied
            annual_rent = annual_net_rent
        else:
            # Subsequent years: apply growth and vacancy
            annual_rent = annual_net_rent * (1 + rent_adjustment)**i
            annual_rent *= (1 - vacancy_chance)
        
        rents.append(annual_rent)
    return rents


# Create a figure
plt.figure(figsize=(8,5))

zero_loss_rent = [annual_net_rent * (1 + rent_adjustment)**i for i in range(len(years))]
plt.plot(years, zero_loss_rent, marker='o', linestyle='-', color='green', label='0 loss scenario')

colors = ['orange', 'red', 'purple']
for vc, color in zip(vacancy_chances[1:], colors):
    scenario_rent = rent_scenarios(vc)
    plt.plot(years, scenario_rent, marker='o', linestyle='--', color=color, label=f'{int(vc*100)}% vacancy')


# Add title and labels
plt.title('Annual rent scenarios')
plt.xlabel('Year')
plt.ylabel('Rent in (€)')
plt.grid(True)
plt.legend()

# Show the plot
plt.show()

```

## Rent-scenarios stochastic

Averaging yearly rent with different chances of vacancy - monte carlo simulation 


```{python}

# | label: stochastic_rent_scenarios
# | fig-cap: "rent scenarios - monte carlo simulation"

import matplotlib.pyplot as plt
from datetime import datetime
import numpy as np

# Data
annual_net_rent = 5_000_000
rent_adjustment = 0.02
units = 5000
vacancy_chance = 0.05  # for the detailed stochastic simulation
years = list(range(datetime.now().year, datetime.now().year + 11))

# Helper function: single Monte Carlo simulation (can vectorize)
def monte_carlo_rent(vacancy, units, sims=1000):
    """
    Returns average rent per year across simulations
    """
    rents = []
    for i in range(len(years)):
        base_rent = annual_net_rent * (1 + rent_adjustment)**i
        if i == 0:
            rents.append(base_rent)
        else:
            # Vectorized occupancy simulation
            occupied_units = np.random.rand(sims, units) > vacancy
            rents.append(base_rent * occupied_units.mean(axis=1).mean())
    return rents

# Deterministic 0% vacancy scenario
zero_loss_rent = [annual_net_rent * (1 + rent_adjustment)**i for i in range(len(years))]

# Generate multiple single-run simulations for 5% vacancy
num_sims = 500
all_sims = np.array([
    [annual_net_rent * (1 + rent_adjustment)**i * (np.sum(np.random.rand(units) > vacancy_chance)/units) 
     if i > 0 else annual_net_rent for i in range(len(years))]
    for _ in range(num_sims)
])
average_rent = all_sims.mean(axis=0)

# -----------------------------
# Plot side by side
# -----------------------------
fig, axes = plt.subplots(1, 2, figsize=(16,5))

# Plot 1: original stochastic average scenarios
axes[0].plot(years, zero_loss_rent, marker='o', linestyle='-', color='green', label='0 loss scenario')
for vc, color in zip([0.05, 0.1, 0.2], ['orange', 'red', 'purple']):
    scenario_rent = monte_carlo_rent(vc, units)
    axes[0].plot(years, scenario_rent, marker='o', linestyle='--', color=color, label=f'{int(vc*100)}% vacancy per unit')
axes[0].set_title('Stochastic Rent Scenarios')
axes[0].set_xlabel('Year')
axes[0].set_ylabel('Rent (€)')
axes[0].grid(True)
axes[0].legend()

# Plot 2: 100 Monte Carlo runs with average highlighted
for sim_rent in all_sims:
    axes[1].plot(years, sim_rent, color='orange', alpha=0.2)
axes[1].plot(years, average_rent, marker='o', linestyle='-', color='red', linewidth=2, label='Average rent (5% vacancy)')
axes[1].plot(years, zero_loss_rent, marker='o', linestyle='-', color='green', label='0 loss scenario')
axes[1].set_title('500 Monte Carlo Simulations (5% Vacancy)')
axes[1].set_xlabel('Year')
axes[1].set_ylabel('Rent (€)')
axes[1].grid(True)
axes[1].legend()

plt.tight_layout()
plt.show()
```
